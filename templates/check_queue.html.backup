<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Check Queue - Check Validation System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard.css') }}">
    <style>
        /* Enhanced styles for dynamic buttons */
        .confidence-badge {
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
            padding: 0.125rem 0.5rem;
            border-radius: 0.375rem;
            font-size: 0.75rem;
            font-weight: 500;
        }
        
        .confidence-high {
            background-color: #d1fae5;
            color: #065f46;
            border: 1px solid #a7f3d0;
        }
        
        .confidence-medium {
            background-color: #fef3c7;
            color: #92400e;
            border: 1px solid #fde68a;
        }
        
        .confidence-low {
            background-color: #fee2e2;
            color: #991b1b;
            border: 1px solid #fecaca;
        }
        
        .action-button {
            position: relative;
            overflow: hidden;
        }
        
        .batch-row {
            cursor: pointer;
            transition: all 0.15s ease;
        }
        
        .batch-row:hover {
            background-color: #f8fafc;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        
        .action-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }
        
        .action-button:hover::before {
            left: 100%;
        }
        
        .quick-action-container {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }
        
        .processing-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.375rem;
        }

                /* Dashboard CSS - Universal Document Intelligence */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');

        :root {
            --primary: #1e293b;
            --primary-light: #334155;
            --surface: #ffffff;
            --surface-secondary: #f8fafc;
            --border-light: #f1f5f9;
            --text-primary: #0f172a;
            --text-secondary: #475569;
            --text-tertiary: #94a3b8;
            --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
            --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            color: var(--text-primary);
            line-height: 1.5;
            -webkit-font-smoothing: antialiased;
        }

        .surface {
            background: var(--surface);
            border: 1px solid var(--border-light);
            box-shadow: var(--shadow);
        }

        .surface-elevated {
            background: var(--surface);
            box-shadow: var(--shadow-lg);
        }

        .metric-card {
            background: var(--surface);
            border: 1px solid var(--border-light);
            border-radius: 12px;
            padding: 20px;
            transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .metric-card:hover {
            box-shadow: var(--shadow-lg);
        }

        .btn-primary {
            background: var(--primary);
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            font-weight: 500;
            font-size: 14px;
            transition: all 0.15s ease;
            cursor: pointer;
            border: none;
        }

        .btn-primary:hover {
            background: var(--primary-light);
        }

        .chat-container {
            background: var(--surface);
            border-radius: 16px;
            box-shadow: var(--shadow-xl);
            overflow: hidden;
        }

        .chat-header {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
            padding: 20px 24px;
            color: white;
        }

        .chat-messages {
            min-height: 400px;
            max-height: 500px;
            overflow-y: auto;
            padding: 24px;
            background: var(--surface-secondary);
        }

        .message {
            margin-bottom: 20px;
            animation: slideUp 0.3s ease-out;
        }

        .message-assistant {
            display: flex;
            align-items: flex-start;
            gap: 12px;
        }

        .message-user {
            display: flex;
            align-items: flex-start;
            gap: 12px;
            justify-content: flex-end;
        }

        .message-content {
            max-width: 70%;
            padding: 16px 20px;
            border-radius: 12px;
            font-size: 14px;
            line-height: 1.5;
        }

        .message-assistant .message-content {
            background: var(--surface);
            border: 1px solid var(--border-light);
            color: var(--text-primary);
        }

        .message-user .message-content {
            background: var(--primary);
            color: white;
        }

        .avatar {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }

        .avatar-assistant {
            background: var(--surface-secondary);
            color: var(--text-secondary);
        }

        .avatar-user {
            background: var(--primary);
            color: white;
        }

        .chat-input-container {
            padding: 20px 24px;
            background: var(--surface);
            border-top: 1px solid var(--border-light);
        }

        .chat-input {
            width: 100%;
            resize: none;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 12px 16px;
            font-size: 14px;
            background: var(--surface);
            color: var(--text-primary);
            transition: all 0.15s ease;
            font-family: inherit;
        }

        /* .chat-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgb(59 130 246 / 0.1);
        } */

        .sidebar-nav-item {
            color: var(--text-secondary);
            text-decoration: none;
            font-size: 14px;
        }

        .sidebar-nav-item:hover {
            background: #f1f5f9;
            color: var(--text-primary);
        }

        .sidebar-nav-active {
            background: var(--primary);
            color: white !important;
        }

        .sidebar-nav-active:hover {
            background: var(--primary-light);
            color: white !important;
        }

        .sidebar-section {
            margin-top: 24px;
        }

        .sidebar-section-title {
            margin-bottom: 8px;
        }

        @media (max-width: 1024px) {
            .sidebar-text { display: none; }
            #sidebar { width: 80px; }
            #sidebar.sidebar-expanded { width: 256px; }
            #sidebar.sidebar-expanded .sidebar-text { display: inline; }
        }

        @keyframes slideUp {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .sidebar-overlay {
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 30;
            display: none;
        }

        .sidebar-overlay.active {
            display: block;
        }

        /* Manila Folder Tab Navigation Styles */
        .tab-button {
            color: #6b7280;
            position: relative;
            z-index: 10;
            border: none;
            outline: none;
            border-radius: 12px 12px 0 0;
            margin-right: 8px;
            padding-left: 24px;
            padding-right: 24px;
            height: 40px;
            display: flex;
            align-items: center;
        }

        .tab-button:hover {
            color: #374151;
            background: #f1f5f9;
        }

        .tab-button.active {
            color: #ffffff;
            background: #1e293b;
            z-index: 20;
        }

        .tab-button:not(.active) {
            background: #e2e8f0;
            color: #64748b;
        }

        .tab-button:first-child {
            margin-left: 0;
        }

        .tab-button:last-child {
            margin-right: 0;
        }

        /* Remove any border/gap between tabs and content */
        .tab-content .surface {
            border-top-left-radius: 0;
            border-top-right-radius: 0;
            margin-top: -2px;
            border-top: none !important;
        }
        
        /* Make tabs perfectly flush */
        .tab-button.active {
            margin-bottom: -1px;
        }

        .tab-count {
            transition: all 0.2s ease;
        }

        /* Tab badge styling */
        .tab-button:not(.active) .tab-count {
            background-color: rgba(255, 255, 255, 0.3) !important;
            color: #475569 !important;
        }

        .tab-button.active .tab-count {
            background-color: rgba(255, 255, 255, 0.2) !important;
            color: #ffffff !important;
        }

        /* Tab Content Styles */
        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Table top-right corner rounding */
        .tab-content table thead tr th:last-child {
            border-top-right-radius: 12px;
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Mobile Sidebar Overlay -->
    <div id="sidebarOverlay" class="sidebar-overlay"></div>

    <!-- Sidebar -->
    <aside id="sidebar" class="fixed left-0 top-0 z-40 w-64 h-screen transition-transform -translate-x-full lg:translate-x-0 bg-white border-r border-gray-200">
        <div class="h-full px-3 py-4 overflow-y-auto">
            <!-- Logo Section -->
            <div class="flex items-center gap-3 px-3 py-4 mb-6 border-b border-gray-200">
                <div class="w-10 h-10 bg-gradient-to-br from-slate-800 to-slate-700 rounded-lg flex items-center justify-center">
                    <i class="fa-solid fa-brain fa-lg text-white"></i>
                </div>
                <div class="sidebar-text">
                    <h1 class="text-sm font-semibold text-slate-800">Sweet-Docs</h1>
                    <p class="text-xs text-slate-600 font-medium">DOCUMENT INTELLIGENCE</p>
                </div>
            </div>

            <!-- Navigation Menu -->
            <nav class="space-y-2">
                <!-- Main Dashboard -->
                <a href="/" class="sidebar-nav-item flex items-center gap-3 px-3 py-2.5 rounded-lg transition-colors text-gray-600 hover:bg-gray-100 hover:text-gray-900">
                    <i class="fa-solid fa-house w-4 h-4"></i>
                    <span class="sidebar-text">Main Dashboard</span>
                </a>

                <!-- Document Types -->
                <div class="sidebar-section">
                    <div class="sidebar-section-title px-3 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wider">
                        <span class="sidebar-text">Document Types</span>
                    </div>
                    <a href="/checks/queue" class="sidebar-nav-item sidebar-nav-active flex items-center gap-3 px-3 py-2.5 rounded-lg transition-colors bg-slate-800 text-white">
                        <i class="fa-solid fa-money-check w-4 h-4"></i>
                        <span class="sidebar-text">Checks</span>
                        <span class="ml-auto bg-blue-100 text-blue-800 text-xs px-2 py-0.5 rounded-full sidebar-text">{{ total_count }}</span>
                    </a>
                    <a href="/contracts/" class="sidebar-nav-item flex items-center gap-3 px-3 py-2.5 rounded-lg transition-colors text-gray-600 hover:bg-gray-100 hover:text-gray-900">
                        <i class="fa-solid fa-file-contract w-4 h-4"></i>
                        <span class="sidebar-text">Contracts</span>
                        <span class="ml-auto bg-green-100 text-green-800 text-xs px-2 py-0.5 rounded-full sidebar-text">156</span>
                    </a>
                    <a href="/legal-documents/" class="sidebar-nav-item flex items-center gap-3 px-3 py-2.5 rounded-lg transition-colors text-gray-600 hover:bg-gray-100 hover:text-gray-900">
                        <i class="fa-solid fa-balance-scale w-4 h-4"></i>
                        <span class="sidebar-text">Legal Documents</span>
                        <span class="ml-auto bg-purple-100 text-purple-800 text-xs px-2 py-0.5 rounded-full sidebar-text">89</span>
                    </a>
                    <a href="/documents/" class="sidebar-nav-item flex items-center gap-3 px-3 py-2.5 rounded-lg transition-colors text-gray-600 hover:bg-gray-100 hover:text-gray-900">
                        <i class="fa-solid fa-file-alt w-4 h-4"></i>
                        <span class="sidebar-text">General Documents</span>
                        <span class="ml-auto bg-gray-100 text-gray-800 text-xs px-2 py-0.5 rounded-full sidebar-text">234</span>
                    </a>
                </div>

                <!-- Analytics -->
                <div class="sidebar-section">
                    <div class="sidebar-section-title px-3 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wider">
                        <span class="sidebar-text">Analytics</span>
                    </div>
                    <a href="#" class="sidebar-nav-item flex items-center gap-3 px-3 py-2.5 rounded-lg transition-colors text-gray-600 hover:bg-gray-100 hover:text-gray-900">
                        <i class="fa-solid fa-chart-line w-4 h-4"></i>
                        <span class="sidebar-text">Cross-Document Analysis</span>
                    </a>
                    <a href="#" class="sidebar-nav-item flex items-center gap-3 px-3 py-2.5 rounded-lg transition-colors text-gray-600 hover:bg-gray-100 hover:text-gray-900">
                        <i class="fa-solid fa-search w-4 h-4"></i>
                        <span class="sidebar-text">Entity Relationships</span>
                    </a>
                </div>

                <!-- Data Sources -->
                <div class="sidebar-section">
                    <div class="sidebar-section-title px-3 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wider">
                        <span class="sidebar-text">Data Sources</span>
                    </div>
                    <a href="#" class="sidebar-nav-item flex items-center gap-3 px-3 py-2.5 rounded-lg transition-colors text-gray-600 hover:bg-gray-100 hover:text-gray-900">
                        <i class="fa-brands fa-salesforce w-4 h-4"></i>
                        <span class="sidebar-text">Salesforce</span>
                        <div class="ml-auto w-2 h-2 bg-green-500 rounded-full sidebar-text"></div>
                    </a>
                    <a href="#" class="sidebar-nav-item flex items-center gap-3 px-3 py-2.5 rounded-lg transition-colors text-gray-600 hover:bg-gray-100 hover:text-gray-900">
                        <i class="fa-solid fa-database w-4 h-4"></i>
                        <span class="sidebar-text">Vector Database</span>
                        <div class="ml-auto w-2 h-2 bg-green-500 rounded-full sidebar-text"></div>
                    </a>
                </div>

                <!-- System -->
                <div class="sidebar-section">
                    <div class="sidebar-section-title px-3 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wider">
                        <span class="sidebar-text">System</span>
                    </div>
                    <a href="#" class="sidebar-nav-item flex items-center gap-3 px-3 py-2.5 rounded-lg transition-colors text-gray-600 hover:bg-gray-100 hover:text-gray-900">
                        <i class="fa-solid fa-upload w-4 h-4"></i>
                        <span class="sidebar-text">Bulk Upload</span>
                    </a>
                    <a href="/debug" class="sidebar-nav-item flex items-center gap-3 px-3 py-2.5 rounded-lg transition-colors text-gray-600 hover:bg-gray-100 hover:text-gray-900">
                        <i class="fa-solid fa-bug w-4 h-4"></i>
                        <span class="sidebar-text">Debug Info</span>
                    </a>
                </div>
            </nav>
        </div>
    </aside>

    <!-- Main Content Area -->
    <div class="lg:ml-64">
        <!-- Header -->
        <header class="surface-elevated sticky top-0 z-30 backdrop-blur-md bg-white/95 border-b border-gray-200">
            <div class="px-6 py-4">
                <div class="flex items-center justify-between">
                    <div class="flex items-center gap-3">
                        <!-- Mobile menu button -->
                        <button id="mobileMenuBtn" class="lg:hidden p-2 rounded-lg text-gray-600 hover:bg-gray-100">
                            <i class="fa-solid fa-bars w-5 h-5"></i>
                        </button>
                        
                        <div class="w-10 h-10 bg-gradient-to-br from-slate-800 to-slate-700 rounded-lg flex items-center justify-center">
                            <i class="fa-solid fa-shield-halved fa-lg text-white"></i>
                        </div>
                        <div>
                            <h1 class="text-lg font-semibold text-primary">Check Queue</h1>
                            <p class="text-xs text-tertiary font-medium">INTELLIGENT VALIDATION ROUTING</p>
                        </div>
                    </div>
                    <div class="flex items-center gap-3">
                        {% if user %}
                        <div class="flex items-center gap-4 px-4 py-2 bg-slate-50 border border-slate-200 rounded-lg">
                            <div class="text-right">
                                <div class="text-sm font-medium text-slate-800">{{ user.name }}</div>
                                <div class="text-xs text-slate-600">{{ user.preferred_username }}</div>
                            </div>
                            <div class="w-8 h-8 bg-slate-600 rounded-lg flex items-center justify-center">
                                <i class="fa-solid fa-user w-4 h-4 text-white"></i>
                            </div>
                        </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main class="px-6 py-8">
            <!-- Enhanced Stats Bar with Dynamic Routing Info -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                <div class="metric-card">
                    <div class="flex items-center justify-between mb-3">
                        <span class="text-xs font-semibold text-tertiary uppercase tracking-wide">AUTO-APPROVE READY</span>
                        <i class="fa-solid fa-robot w-4 h-4 text-green-500"></i>
                    </div>
                    <div class="text-2xl font-bold text-green-600 mb-1">
                        {{ checks | selectattr('confidence_score', '>', 0.8) | list | length }}
                    </div>
                    <div class="text-xs text-secondary">≥80% confidence</div>
                </div>
                
                <div class="metric-card">
                    <div class="flex items-center justify-between mb-3">
                        <span class="text-xs font-semibold text-tertiary uppercase tracking-wide">NEEDS REVIEW</span>
                        <i class="fa-solid fa-user-check w-4 h-4 text-orange-500"></i>
                    </div>
                    <div class="text-2xl font-bold text-orange-600 mb-1">
                        {{ checks | selectattr('confidence_score', '<', 0.8) | list | length }}
                    </div>
                    <div class="text-xs text-secondary">&lt;80% confidence</div>
                </div>

                <div class="metric-card">
                    <div class="flex items-center justify-between mb-3">
                        <span class="text-xs font-semibold text-tertiary uppercase tracking-wide">TOTAL PENDING</span>
                        <i class="fa-solid fa-clock w-4 h-4 text-purple-500"></i>
                    </div>
                    <div class="text-2xl font-bold text-primary mb-1">{{ total_count }}</div>
                    <div class="text-xs text-secondary">Awaiting processing</div>
                </div>
                
                <div class="metric-card">
                    <div class="flex items-center justify-between mb-3">
                        <span class="text-xs font-semibold text-tertiary uppercase tracking-wide">AUTOMATION RATE</span>
                        <i class="fa-solid fa-chart-line w-4 h-4 text-blue-500"></i>
                    </div>
                    {% set automation_rate = ((checks | selectattr('confidence_score', '>', 0.8) | list | length) / (total_count if total_count > 0 else 1) * 100) | round(1) %}
                    <div class="text-2xl font-bold text-blue-600 mb-1">{{ automation_rate }}%</div>
                    <div class="text-xs text-secondary">Can auto-process</div>
                </div>
            </div>

            <!-- Error State -->
            {% if error_message %}
            <div class="bg-red-50 border border-red-200 rounded-lg p-6 mb-8">
                <div class="flex items-center">
                    <i class="fa-solid fa-exclamation-circle w-5 h-5 text-red-500 mr-3"></i>
                    <div>
                        <h3 class="text-red-800 font-medium">Error Loading Checks</h3>
                        <p class="text-red-600 text-sm">{{ error_message }}</p>
                    </div>
                </div>
            </div>
            {% endif %}

            <!-- Batches Table -->
            {% if batches %}
            <div id="batchListTable" class="bg-white rounded-lg shadow-sm border border-slate-200 mb-8">
                <div class="px-6 py-4 border-b border-slate-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center gap-3">
                            <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                                <i class="fa-solid fa-layer-group text-blue-600"></i>
                            </div>
                            <div>
                                <h2 class="text-lg font-semibold text-slate-900">Check Batches</h2>
                                <p class="text-sm text-slate-600">Click on any batch to view its checks</p>
                            </div>
                        </div>
                        <div class="text-sm text-slate-500">{{ batches | length }} batch{{ 'es' if batches | length != 1 else '' }}</div>
                    </div>
                </div>
                
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead class="bg-slate-50 border-b border-slate-200">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Batch Name</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Created</th>
                                <th class="px-6 py-3 text-center text-xs font-medium text-slate-500 uppercase tracking-wider"># of Checks</th>
                                <th class="px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider">Total Amount</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Status Summary</th>
                                <th class="px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-slate-200">
                            {% for batch in batches %}
                            <tr class="hover:bg-slate-50 transition-colors duration-150 cursor-pointer" 
                                onclick="viewBatch('{{ batch.batch_id }}')">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="w-8 h-8 bg-slate-100 rounded-lg flex items-center justify-center mr-3">
                                            <i class="fa-solid fa-folder text-slate-600 text-sm"></i>
                                        </div>
                                        <div class="text-sm font-medium text-slate-900">{{ batch.batch_name }}</div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-slate-900">
                                        {{ batch.created_at | datetimeformat if batch.created_at else 'N/A' }}
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-center">
                                    <span class="text-sm font-medium text-slate-900">{{ batch.check_count }}</span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-right">
                                    <span class="text-sm font-medium text-green-600">
                                        ${{ "{:,.2f}".format(batch.total_amount) if batch.total_amount else "0.00" }}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex space-x-1">
                                        {% if batch.pending_count > 0 %}
                                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-100 text-yellow-800">
                                            {{ batch.pending_count }} Pending
                                        </span>
                                        {% endif %}
                                        {% if batch.approved_count > 0 %}
                                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                                            {{ batch.approved_count }} Approved
                                        </span>
                                        {% endif %}
                                        {% if batch.needs_review_count > 0 %}
                                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800">
                                            {{ batch.needs_review_count }} Review
                                        </span>
                                        {% endif %}
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                    <button onclick="event.stopPropagation(); viewBatch('{{ batch.batch_id }}')" 
                                            class="text-blue-600 hover:text-blue-900">
                                        View Checks →
                                    </button>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Level 2: Batch Detail View -->
            {% elif view_mode == "batch_detail" %}
            <div class="mb-6">
                <!-- Breadcrumb Navigation -->
                <nav class="flex items-center space-x-2 text-sm text-slate-600 mb-4">
                    <a href="/checks/queue" class="hover:text-slate-900 transition-colors">
                        <i class="fa-solid fa-arrow-left mr-1"></i> All Batches
                    </a>
                    <i class="fa-solid fa-chevron-right text-slate-400"></i>
                    <span class="text-slate-900 font-medium">{{ current_batch_name }}</span>
                </nav>
                
                <!-- Batch Info Header -->
                <div class="bg-white rounded-lg shadow-sm border border-slate-200 p-4 mb-6">
                    <h2 class="text-xl font-semibold text-slate-900">{{ current_batch_name }}</h2>
                    <p class="text-slate-600">{{ total_count }} check{{ "s" if total_count != 1 else "" }} in this batch</p>
                </div>
            </div>
            {% endif %}

            <!-- Back to Batches Button (Outside tabs for cleaner layout) -->
            <div id="backToBatchesBtn" class="mb-4" {% if view_mode == 'batch_list' %}style="display: none;"{% endif %}>
                <button onclick="backToBatches()" class="inline-flex items-center px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white text-sm font-medium rounded-lg transition-colors">
                    <i class="fa-solid fa-arrow-left mr-2"></i>
                    Back to Batches
                </button>
            </div>

            <!-- Manila Folder Style Tab Navigation -->
            <div id="checkTabsContainer" class="mb-0" style="margin-bottom: 2px; margin-left: 1px; {% if view_mode == 'batch_list' %}display: none;{% endif %}">
                <nav class="flex">
                    <button class="tab-button active py-3 font-medium text-sm transition-all duration-200" 
                            data-tab="pending">
                        <i class="fa-solid fa-clock w-4 h-4 mr-2"></i>
                        Pending
                        <span class="ml-2 bg-white/20 text-slate-600 text-xs px-2 py-0.5 rounded-full tab-count" id="pending-count">{{ (checks | selectattr('status', 'equalto', 'pending') | list | length) if checks else 0 }}</span>
                    </button>
                    
                    <button class="tab-button py-3 font-medium text-sm transition-all duration-200" 
                            data-tab="needs_review">
                        <i class="fa-solid fa-exclamation-triangle w-4 h-4 mr-2"></i>
                        Needs Review
                        <span class="ml-2 bg-white/30 text-slate-700 text-xs px-2 py-0.5 rounded-full tab-count" id="needs_review-count">{{ (checks | selectattr('status', 'equalto', 'needs_review') | list | length) if checks else 0 }}</span>
                    </button>
                    
                    <button class="tab-button py-3 font-medium text-sm transition-all duration-200" 
                            data-tab="approved">
                        <i class="fa-solid fa-check-circle w-4 h-4 mr-2"></i>
                        Approved
                        <span class="ml-2 bg-white/30 text-slate-700 text-xs px-2 py-0.5 rounded-full tab-count" id="approved-count">{{ (checks | selectattr('status', 'equalto', 'approved') | list | length) if checks else 0 }}</span>
                    </button>
                </nav>
            </div>

            <!-- Tab Content for Pending -->
            <div class="tab-content active" id="pending-content" {% if view_mode == 'batch_list' %}style="display: none;"{% endif %}>
                <div class="surface rounded-b-xl overflow-hidden" style="border-top: none;">
                <div class="px-6 py-4 bg-gradient-to-br from-slate-800 to-slate-700">
                    <h2 class="text-lg font-semibold text-white">Intelligent Check Processing Queue</h2>
                    <p class="text-sm text-white/80">AI-powered routing: Green buttons = Auto-approve ready, Orange buttons = Forward for review</p>
                </div>
                
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Check #</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Payee</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Matter</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">AI Confidence</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                                <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Smart Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            {% if checks %}
                            {% for check in checks %}
                            {% if check.status in ['pending', 'pending_review'] %}
                            {% set confidence = check.confidence_percentage %}
                            <tr class="hover:bg-gray-50 cursor-pointer transition-colors" onclick="window.location.href='/checks/detail/{{ check.id }}'">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900">{{ check.check_number }}</div>
                                    <div class="text-xs text-gray-500">ID: {{ check.id[:8] }}...</div>
                                </td>
                                <td class="px-6 py-4">
                                    <div class="text-sm text-gray-900 max-w-xs truncate">{{ check.payee_name }}</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900">{{ check.amount }}</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">{{ check.check_date }}</div>
                                </td>
                                <td class="px-6 py-4">
                                    <div class="text-sm text-gray-900 max-w-xs truncate">{{ check.matter_name or '-' }}</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center gap-2">
                                        <div class="text-sm font-medium 
                                            {% if confidence >= 80 %}text-green-600
                                            {% elif confidence >= 60 %}text-yellow-600
                                            {% else %}text-red-600{% endif %}">
                                            {{ confidence }}%
                                        </div>
                                        <div class="w-16 bg-gray-200 rounded-full h-2">
                                            <div class="h-2 rounded-full 
                                                {% if confidence >= 80 %}bg-green-500
                                                {% elif confidence >= 60 %}bg-yellow-500
                                                {% else %}bg-red-500{% endif %}" 
                                                style="width: {{ confidence }}%"></div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                                        {% if check.status == 'pending_review' %}bg-yellow-100 text-yellow-800
                                        {% elif check.status == 'approved' %}bg-green-100 text-green-800
                                        {% elif check.status == 'rejected' %}bg-red-100 text-red-800
                                        {% else %}bg-gray-100 text-gray-800{% endif %}">
                                        {{ check.status | replace('_', ' ') | title }}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    {{ check.created_at[:10] if check.created_at else '-' }}
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-center" onclick="event.stopPropagation();">
                                    {% if check.status == 'pending' or check.status == 'pending_review' %}
                                    <div class="quick-action-container relative" data-check-row="{{ check.id }}">
                                        {% if confidence >= 80 %}
                                        <!-- High Confidence: Auto-Approve Button -->
                                        <button class="auto-approve-btn action-button inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-xs font-medium rounded-lg transition-all duration-200 transform hover:scale-105" 
                                                data-check-id="{{ check.id }}" 
                                                data-check-number="{{ check.check_number }}"
                                                data-amount="{{ check.amount }}"
                                                data-payee="{{ check.payee_name }}"
                                                data-confidence="{{ confidence }}"
                                                title="High confidence - Ready for auto-approval">
                                            <i class="fa-solid fa-robot w-3 h-3 mr-2"></i>
                                            Auto-Approve
                                            <span class="ml-1 text-xs opacity-75">({{ confidence }}%)</span>
                                        </button>
                                        {% else %}
                                        <!-- Low Confidence: Forward for Review Button -->
                                        <button class="forward-review-btn action-button inline-flex items-center px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white text-xs font-medium rounded-lg transition-all duration-200 transform hover:scale-105" 
                                                data-check-id="{{ check.id }}" 
                                                data-check-number="{{ check.check_number }}"
                                                data-amount="{{ check.amount }}"
                                                data-payee="{{ check.payee_name }}"
                                                data-confidence="{{ confidence }}"
                                                title="Low confidence - Requires human review">
                                            <i class="fa-solid fa-user-check w-3 h-3 mr-2"></i>
                                            Forward Review
                                            <span class="ml-1 text-xs opacity-75">({{ confidence }}%)</span>
                                        </button>
                                        {% endif %}
                                        
                                        <!-- Secondary Manual Override Button -->
                                        <button class="manual-override-btn text-gray-400 hover:text-gray-600 p-1 rounded transition-colors" 
                                                data-check-id="{{ check.id }}"
                                                title="Manual override options">
                                            <i class="fa-solid fa-ellipsis-v w-3 h-3"></i>
                                        </button>
                                    </div>
                                    {% else %}
                                    <!-- Already processed - show status only -->
                                    <span class="text-xs text-gray-500 font-medium">
                                        {% if check.status == 'approved' %}
                                            <i class="fa-solid fa-check w-3 h-3 text-green-600 mr-1"></i>
                                            Processed
                                        {% elif check.status == 'rejected' %}
                                            <i class="fa-solid fa-times w-3 h-3 text-red-600 mr-1"></i>
                                            Processed
                                        {% else %}
                                            <i class="fa-solid fa-circle w-3 h-3 text-gray-400 mr-1"></i>
                                            {{ check.status | title }}
                                        {% endif %}
                                    </span>
                                    {% endif %}
                                </td>
                            </tr>
                            {% endif %}
                            {% endfor %}
                            {% else %}
                            <tr>
                                <td colspan="9" class="px-6 py-12 text-center text-gray-500">
                                    <i class="fa-solid fa-clock w-8 h-8 mx-auto mb-2 text-gray-300"></i>
                                    <p class="text-sm">No pending checks at this time</p>
                                </td>
                            </tr>
                            {% endif %}
                            
                            <!-- Show empty state if no pending checks exist -->
                            {% set pending_checks = checks | selectattr('status', 'in', ['pending', 'pending_review']) | list %}
                            {% if checks and pending_checks | length == 0 %}
                            <tr>
                                <td colspan="9" class="px-6 py-12 text-center text-gray-500">
                                    <i class="fa-solid fa-clock w-8 h-8 mx-auto mb-2 text-gray-300"></i>
                                    <p class="text-sm">No pending checks at this time</p>
                                </td>
                            </tr>
                            {% endif %}
                        </tbody>
                    </table>
                </div>
            </div>
            </div>

            <!-- Tab Content for Needs Review -->
            <div class="tab-content" id="needs_review-content" {% if view_mode == 'batch_list' %}style="display: none;"{% endif %}>
                <div class="surface rounded-b-xl overflow-hidden" style="border-top: none;">
                <div class="px-6 py-4 bg-gradient-to-br from-slate-800 to-slate-700">
                        <h2 class="text-lg font-semibold text-white">Checks Requiring Manual Review</h2>
                        <p class="text-sm text-white/80">Low confidence checks flagged for human validation</p>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="w-full">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Check #</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Payee</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Matter</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">AI Confidence</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                                    <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                {% if checks %}
                                {% for check in checks %}
                                {% if check.status == 'needs_review' %}
                                {% set confidence = check.confidence_percentage %}
                                <tr class="hover:bg-gray-50 cursor-pointer transition-colors" onclick="window.location.href='/checks/detail/{{ check.id }}'">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm font-medium text-gray-900">{{ check.check_number }}</div>
                                        <div class="text-xs text-gray-500">ID: {{ check.id[:8] }}...</div>
                                    </td>
                                    <td class="px-6 py-4">
                                        <div class="text-sm text-gray-900 max-w-xs truncate">{{ check.payee_name }}</div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm font-medium text-gray-900">{{ check.amount }}</div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm text-gray-900">{{ check.check_date }}</div>
                                    </td>
                                    <td class="px-6 py-4">
                                        <div class="text-sm text-gray-900 max-w-xs truncate">{{ check.matter_name or '-' }}</div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center gap-2">
                                            <div class="text-sm font-medium 
                                                {% if confidence >= 80 %}text-green-600
                                                {% elif confidence >= 60 %}text-yellow-600
                                                {% else %}text-red-600{% endif %}">
                                                {{ confidence }}%
                                            </div>
                                            <div class="w-16 bg-gray-200 rounded-full h-2">
                                                <div class="h-2 rounded-full 
                                                    {% if confidence >= 80 %}bg-green-500
                                                    {% elif confidence >= 60 %}bg-yellow-500
                                                    {% else %}bg-red-500{% endif %}" 
                                                    style="width: {{ confidence }}%"></div>
                                        </div>
                                    </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                                            Needs Review
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        {{ check.created_at[:10] if check.created_at else '-' }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-center">
                                        <button class="text-orange-600 hover:text-orange-800 text-xs font-medium px-3 py-1 border border-orange-300 rounded-lg hover:bg-orange-50 transition-colors"
                                                onclick="window.location.href='/checks/detail/{{ check.id }}'; event.stopPropagation();">
                                            <i class="fa-solid fa-eye w-3 h-3 mr-1"></i>
                                            Review
                                        </button>
                                    </td>
                                </tr>
                                {% endif %}
                                {% endfor %}
                                {% else %}
                                <tr>
                                    <td colspan="9" class="px-6 py-12 text-center text-gray-500">
                                        <i class="fa-solid fa-exclamation-triangle w-8 h-8 mx-auto mb-2 text-gray-300"></i>
                                        <p class="text-sm">No checks requiring manual review at this time</p>
                                    </td>
                                </tr>
                                {% endif %}
                                
                                <!-- Show empty state if no needs_review checks exist -->
                                {% set needs_review_checks = checks | selectattr('status', 'equalto', 'needs_review') | list %}
                                {% if checks and needs_review_checks | length == 0 %}
                                <tr>
                                    <td colspan="9" class="px-6 py-12 text-center text-gray-500">
                                        <i class="fa-solid fa-exclamation-triangle w-8 h-8 mx-auto mb-2 text-gray-300"></i>
                                        <p class="text-sm">No checks requiring manual review at this time</p>
                                    </td>
                                </tr>
                                {% endif %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Tab Content for Approved -->
            <div class="tab-content" id="approved-content" {% if view_mode == 'batch_list' %}style="display: none;"{% endif %}>
                <div class="surface rounded-b-xl overflow-hidden" style="border-top: none;">
                <div class="px-6 py-4 bg-gradient-to-br from-slate-800 to-slate-700">
                        <h2 class="text-lg font-semibold text-white">Approved Checks</h2>
                        <p class="text-sm text-white/80">Successfully validated and approved checks</p>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="w-full">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Check #</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Payee</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Matter</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">AI Confidence</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Approved</th>
                                    <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                {% if checks %}
                                {% for check in checks %}
                                {% if check.status == 'approved' %}
                                {% set confidence = check.confidence_percentage %}
                                <tr class="hover:bg-gray-50 cursor-pointer transition-colors" onclick="window.location.href='/checks/detail/{{ check.id }}'">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm font-medium text-gray-900">{{ check.check_number }}</div>
                                        <div class="text-xs text-gray-500">ID: {{ check.id[:8] }}...</div>
                                    </td>
                                    <td class="px-6 py-4">
                                        <div class="text-sm text-gray-900 max-w-xs truncate">{{ check.payee_name }}</div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm font-medium text-gray-900">{{ check.amount }}</div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm text-gray-900">{{ check.check_date }}</div>
                                    </td>
                                    <td class="px-6 py-4">
                                        <div class="text-sm text-gray-900 max-w-xs truncate">{{ check.matter_name or '-' }}</div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center gap-2">
                                            <div class="text-sm font-medium 
                                                {% if confidence >= 80 %}text-green-600
                                                {% elif confidence >= 60 %}text-yellow-600
                                                {% else %}text-red-600{% endif %}">
                                                {{ confidence }}%
                                            </div>
                                            <div class="w-16 bg-gray-200 rounded-full h-2">
                                                <div class="h-2 rounded-full 
                                                    {% if confidence >= 80 %}bg-green-500
                                                    {% elif confidence >= 60 %}bg-yellow-500
                                                    {% else %}bg-red-500{% endif %}" 
                                                    style="width: {{ confidence }}%"></div>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                            Approved
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        {{ check.validated_at[:10] if check.validated_at else (check.updated_at[:10] if check.updated_at else '-') }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-center">
                                        <span class="text-xs text-green-600 font-medium">
                                            <i class="fa-solid fa-check w-3 h-3 text-green-600 mr-1"></i>
                                            Validated
                                        </span>
                                    </td>
                                </tr>
                                {% endif %}
                                {% endfor %}
                                {% else %}
                                <tr>
                                    <td colspan="9" class="px-6 py-12 text-center text-gray-500">
                                        <i class="fa-solid fa-check-circle w-8 h-8 mx-auto mb-2 text-gray-300"></i>
                                        <p class="text-sm">No approved checks to display</p>
                                    </td>
                                </tr>
                                {% endif %}
                                
                                <!-- Show empty state if no approved checks exist -->
                                {% set approved_checks = checks | selectattr('status', 'equalto', 'approved') | list %}
                                {% if checks and approved_checks | length == 0 %}
                                <tr>
                                    <td colspan="9" class="px-6 py-12 text-center text-gray-500">
                                        <i class="fa-solid fa-check-circle w-8 h-8 mx-auto mb-2 text-gray-300"></i>
                                        <p class="text-sm">No approved checks to display</p>
                                    </td>
                                </tr>
                                {% endif %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Enhanced Manual Override Modal -->
    <div id="manualOverrideModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-xl p-6 w-96 max-w-full mx-4">
            <h3 class="text-lg font-semibold mb-4">Manual Override Options</h3>
            <div class="mb-4 p-3 bg-gray-50 rounded-lg">
                <div class="text-sm font-medium text-gray-900" id="overrideCheckInfo">Check details will appear here</div>
            </div>
            <div class="space-y-3">
                <button id="forceApprove" class="w-full flex items-center justify-center px-4 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
                    <i class="fa-solid fa-check-double w-4 h-4 mr-2"></i>
                    Quick Approval
                </button>

                <button id="sendToReview" class="w-full flex items-center justify-center px-4 py-3 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg transition-colors">
                    <i class="fa-solid fa-user-check w-4 h-4 mr-2"></i>
                    Send to Manual Review
                </button>
            </div>
            <div class="flex justify-end gap-3 mt-4">
                <button id="cancelOverride" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Enhanced Forward Review Modal -->
    <div id="forwardReviewModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-xl p-6 w-96 max-w-full mx-4">
            <h3 class="text-lg font-semibold mb-4">Forward for Human Review</h3>
            <div class="mb-4 p-3 bg-orange-50 rounded-lg border border-orange-200">
                <div class="text-sm font-medium text-orange-900" id="forwardCheckInfo">Check details will appear here</div>
                <div class="text-xs text-orange-700 mt-1" id="confidenceReason">AI confidence reason will appear here</div>
            </div>
            <textarea id="forwardReason" class="w-full p-3 border rounded-lg resize-none" rows="3" 
                placeholder="Optional: Add notes for the reviewer..."></textarea>
            <div class="flex justify-end gap-3 mt-4">
                <button id="cancelForward" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">Cancel</button>
                <button id="confirmForward" class="bg-orange-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-orange-700">
                    Forward to Review Queue
                </button>
            </div>
        </div>
    </div>

    <!-- Success/Error Toast Notifications -->
    <div id="toastContainer" class="fixed top-4 right-4 z-50 space-y-2"></div>

    <script>
        // Helper functions for confidence-based styling
        function getConfidenceTextColor(confidence) {
            const confidenceNum = parseInt(confidence.replace('%', ''));
            if (confidenceNum >= 80) return 'text-green-600';
            if (confidenceNum >= 60) return 'text-yellow-600';
            return 'text-red-600';
        }
        
        function getConfidenceBarColor(confidence) {
            const confidenceNum = parseInt(confidence.replace('%', ''));
            if (confidenceNum >= 80) return 'bg-green-500';
            if (confidenceNum >= 60) return 'bg-yellow-500';
            return 'bg-red-500';
        }

        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden transform transition-all duration-300 translate-x-full opacity-0`;
            
            const bgColor = type === 'success' ? 'bg-green-50' : type === 'error' ? 'bg-red-50' : 'bg-blue-50';
            const textColor = type === 'success' ? 'text-green-800' : type === 'error' ? 'text-red-800' : 'text-blue-800';
            const iconClass = type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle';
            
            toast.innerHTML = `
                <div class="p-4 ${bgColor}">
                    <div class="flex items-center">
                        <i class="fa-solid ${iconClass} w-5 h-5 ${textColor} mr-3"></i>
                        <p class="text-sm font-medium ${textColor}">${message}</p>
                    </div>
                </div>
            `;
            
            const container = document.getElementById('toastContainer');
            if (container) {
                container.appendChild(toast);
                
                // Animate in
                setTimeout(() => {
                    toast.classList.remove('translate-x-full', 'opacity-0');
                }, 100);
                
                // Animate out and remove
                setTimeout(() => {
                    toast.classList.add('translate-x-full', 'opacity-0');
                    setTimeout(() => toast.remove(), 300);
                }, 4000);
            }
        }

        // Batch navigation function - AJAX load checks
        function backToBatches() {
            console.log('Navigating back to batches list');
            
            // Show batch table
            const batchTable = document.getElementById('batchListTable');
            if (batchTable) {
                batchTable.style.display = 'block';
                console.log('Batch table shown');
            }
            
            // Hide back button
            const backBtn = document.getElementById('backToBatchesBtn');
            if (backBtn) {
                backBtn.style.display = 'none';
                console.log('Back button hidden');
            }
            
            // Hide check tabs
            const checkTabsContainer = document.getElementById('checkTabsContainer');
            if (checkTabsContainer) {
                checkTabsContainer.style.display = 'none';
                console.log('Check tabs hidden');
            }
            
            // Hide all tab content containers
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(content => {
                content.style.display = 'none';
            });
            console.log('All tab contents hidden');
        }
        
        async function viewBatch(batchId) {
            try {
                console.log('viewBatch called with batch_id:', batchId);
                
                // Show loading state
                showToast('Loading batch checks...', 'info');
                
                // Fetch checks for this batch
                console.log('Fetching from:', `/api/batches/${batchId}/checks`);
                const response = await fetch(`/api/batches/${batchId}/checks`);
                const data = await response.json();
                
                console.log('API Response:', data);
                
                if (data.status === 'success') {
                    // Clear all existing tables
                    console.log('Clearing all tables...');
                    clearAllTables();
                    
                    // Populate tables with batch checks
                    console.log(`Populating tables with ${data.checks.length} checks...`);
                    populateTablesWithChecks(data.checks);
                    
                    // Update tab counts
                    updateTabCounts();
                    
                    // Hide batch table, show check tabs
                    const batchTable = document.getElementById('batchListTable');
                    if (batchTable) {
                        console.log('Hiding batch table');
                        batchTable.style.display = 'none';
                    }
                    
                    // Show back button
                    const backBtn = document.getElementById('backToBatchesBtn');
                    if (backBtn) {
                        backBtn.style.display = 'block';
                        console.log('Back button shown');
                    }
                    
                    const checkTabsContainer = document.getElementById('checkTabsContainer');
                    if (checkTabsContainer) {
                        console.log('Showing check tabs');
                        checkTabsContainer.style.display = 'block';
                    }
                    
                    // Show all tab content containers
                    const tabContents = document.querySelectorAll('.tab-content');
                    console.log('Found tab content containers:', tabContents.length);
                    tabContents.forEach((content, index) => {
                        // Show the active tab, hide others
                        if (content.classList.contains('active')) {
                            content.style.display = 'block';
                            console.log(`Tab content ${index} (${content.id}) is active and visible`);
                        } else {
                            content.style.display = 'none';
                            console.log(`Tab content ${index} (${content.id}) is hidden`);
                        }
                    });
                    
                    showToast(`Loaded ${data.total} checks from batch`, 'success');
                } else {
                    console.error('API returned error:', data);
                    showToast('Failed to load batch checks', 'error');
                }
            } catch (error) {
                console.error('Error loading batch:', error);
                showToast('Error loading batch checks', 'error');
            }
        }
        
        function clearAllTables() {
            // Clear pending table
            const pendingTableBody = document.querySelector('#pending-content tbody');
            pendingTableBody.innerHTML = '';
            
            // Clear needs review table
            const needsReviewTableBody = document.querySelector('#needs_review-content tbody');
            needsReviewTableBody.innerHTML = '';
            
            // Clear approved table
            const approvedTableBody = document.querySelector('#approved-content tbody');
            approvedTableBody.innerHTML = '';
        }
        
        function populateTablesWithChecks(checks) {
            console.log('populateTablesWithChecks called with', checks.length, 'checks');
            try {
                checks.forEach(check => {
                    const status = check.status;
                    console.log(`Processing check ${check.check_number} with status: ${status}`);
                    
                    if (status === 'pending' || status === 'pending_review') {
                        addCheckToPendingTable(check);
                    } else if (status === 'needs_review') {
                        addCheckToNeedsReviewTable(check);
                    } else if (status === 'approved') {
                        addCheckToApprovedTable(check);
                    }
                });
                
                console.log('All checks processed, checking for empty states...');
                // Add empty states if tables are empty - make this optional
                if (typeof checkAndAddEmptyState === 'function') {
                    checkAndAddEmptyState();
                } else {
                    console.warn('checkAndAddEmptyState function not found, skipping empty state check');
                }
            } catch (error) {
                console.error('Error in populateTablesWithChecks:', error);
                throw error;
            }
        }
        
        function updateTabCounts() {
            // Count checks in each table
            const pendingCount = document.querySelectorAll('#pending-content tbody tr:not([style*="display: none"])').length;
            const needsReviewCount = document.querySelectorAll('#needs_review-content tbody tr:not([style*="display: none"])').length;
            const approvedCount = document.querySelectorAll('#approved-content tbody tr:not([style*="display: none"])').length;
            
            // Update tab count badges
            const pendingBadge = document.getElementById('pending-count');
            const needsReviewBadge = document.getElementById('needs_review-count');
            const approvedBadge = document.getElementById('approved-count');
            
            if (pendingBadge) pendingBadge.textContent = pendingCount;
            if (needsReviewBadge) needsReviewBadge.textContent = needsReviewCount;
            if (approvedBadge) approvedBadge.textContent = approvedCount;
            
            console.log('Tab counts updated:', { pendingCount, needsReviewCount, approvedCount });
        }
        
        function addCheckToPendingTable(check) {
            const pendingTableBody = document.querySelector('#pending-content tbody');
            const confidence = check.confidence_percentage || 0;
            
            const row = document.createElement('tr');
            row.className = 'hover:bg-gray-50 cursor-pointer transition-colors';
            row.onclick = () => window.location.href = `/checks/detail/${check.id}`;
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900">${check.check_number || 'N/A'}</div>
                    <div class="text-xs text-gray-500">ID: ${check.id.substring(0, 8)}...</div>
                </td>
                <td class="px-6 py-4">
                    <div class="text-sm text-gray-900 max-w-xs truncate">${check.payee_name || 'N/A'}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900">${check.amount || 'N/A'}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-900">${check.check_date || 'N/A'}</div>
                </td>
                <td class="px-6 py-4">
                    <div class="text-sm text-gray-900 max-w-xs truncate">${check.matter_name || '-'}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center gap-2">
                        <div class="text-sm font-medium ${getConfidenceTextColor(confidence + '%')}">${confidence}%</div>
                        <div class="w-16 bg-gray-200 rounded-full h-2">
                            <div class="h-2 rounded-full ${getConfidenceBarColor(confidence + '%')}" style="width: ${confidence}%"></div>
                        </div>
                    </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                        Pending
                    </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${check.created_at ? check.created_at.substring(0, 10) : '-'}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-center" onclick="event.stopPropagation();">
                    <div class="quick-action-container relative" data-check-row="${check.id}">
                        ${confidence >= 80 ? `
                        <button class="auto-approve-btn action-button inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-xs font-medium rounded-lg transition-all duration-200 transform hover:scale-105" 
                                data-check-id="${check.id}" 
                                data-check-number="${check.check_number}"
                                data-amount="${check.amount}"
                                data-payee="${check.payee_name}"
                                data-confidence="${confidence}"
                                title="High confidence - Ready for auto-approval">
                            <i class="fa-solid fa-robot w-3 h-3 mr-2"></i>
                            Auto-Approve
                            <span class="ml-1 text-xs opacity-75">(${confidence}%)</span>
                        </button>
                        ` : `
                        <button class="forward-review-btn action-button inline-flex items-center px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white text-xs font-medium rounded-lg transition-all duration-200 transform hover:scale-105" 
                                data-check-id="${check.id}" 
                                data-check-number="${check.check_number}"
                                data-amount="${check.amount}"
                                data-payee="${check.payee_name}"
                                data-confidence="${confidence}"
                                title="Low confidence - Requires human review">
                            <i class="fa-solid fa-user-check w-3 h-3 mr-2"></i>
                            Forward Review
                            <span class="ml-1 text-xs opacity-75">(${confidence}%)</span>
                        </button>
                        `}
                        <button class="manual-override-btn text-gray-400 hover:text-gray-600 p-1 rounded transition-colors" 
                                data-check-id="${check.id}"
                                title="Manual override options">
                            <i class="fa-solid fa-ellipsis-v w-3 h-3"></i>
                        </button>
                    </div>
                </td>
            `;
            
            pendingTableBody.appendChild(row);
            attachEventListenersToRow(row);
        }
        
        function addCheckToNeedsReviewTable(check) {
            const needsReviewTableBody = document.querySelector('#needs_review-content tbody');
            const confidence = check.confidence_percentage || 0;
            
            const row = document.createElement('tr');
            row.className = 'hover:bg-gray-50 cursor-pointer transition-colors';
            row.onclick = () => window.location.href = `/checks/detail/${check.id}`;
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900">${check.check_number || 'N/A'}</div>
                    <div class="text-xs text-gray-500">ID: ${check.id.substring(0, 8)}...</div>
                </td>
                <td class="px-6 py-4">
                    <div class="text-sm text-gray-900 max-w-xs truncate">${check.payee_name || 'N/A'}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900">${check.amount || 'N/A'}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-900">${check.check_date || 'N/A'}</div>
                </td>
                <td class="px-6 py-4">
                    <div class="text-sm text-gray-900 max-w-xs truncate">${check.matter_name || '-'}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center gap-2">
                        <div class="text-sm font-medium ${getConfidenceTextColor(confidence + '%')}">${confidence}%</div>
                        <div class="w-16 bg-gray-200 rounded-full h-2">
                            <div class="h-2 rounded-full ${getConfidenceBarColor(confidence + '%')}" style="width: ${confidence}%"></div>
                        </div>
                    </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                        Needs Review
                    </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${check.created_at ? check.created_at.substring(0, 10) : '-'}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-center">
                    <button class="text-orange-600 hover:text-orange-800 text-xs font-medium px-3 py-1 border border-orange-300 rounded-lg hover:bg-orange-50 transition-colors"
                            onclick="window.location.href='/checks/detail/${check.id}'; event.stopPropagation();">
                        <i class="fa-solid fa-eye w-3 h-3 mr-1"></i>
                        Review
                    </button>
                </td>
            `;
            
            needsReviewTableBody.appendChild(row);
        }
        
        function addCheckToApprovedTable(check) {
            const approvedTableBody = document.querySelector('#approved-content tbody');
            const confidence = check.confidence_percentage || 0;
            
            const row = document.createElement('tr');
            row.className = 'hover:bg-gray-50 cursor-pointer transition-colors';
            row.onclick = () => window.location.href = `/checks/detail/${check.id}`;
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900">${check.check_number || 'N/A'}</div>
                    <div class="text-xs text-gray-500">ID: ${check.id.substring(0, 8)}...</div>
                </td>
                <td class="px-6 py-4">
                    <div class="text-sm text-gray-900 max-w-xs truncate">${check.payee_name || 'N/A'}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900">${check.amount || 'N/A'}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-900">${check.check_date || 'N/A'}</div>
                </td>
                <td class="px-6 py-4">
                    <div class="text-sm text-gray-900 max-w-xs truncate">${check.matter_name || '-'}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center gap-2">
                        <div class="text-sm font-medium ${getConfidenceTextColor(confidence + '%')}">${confidence}%</div>
                        <div class="w-16 bg-gray-200 rounded-full h-2">
                            <div class="h-2 rounded-full ${getConfidenceBarColor(confidence + '%')}" style="width: ${confidence}%"></div>
                        </div>
                    </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                        Approved
                    </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${check.validated_at ? check.validated_at.substring(0, 10) : (check.updated_at ? check.updated_at.substring(0, 10) : '-')}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-center">
                    <span class="text-xs text-green-600 font-medium">
                        <i class="fa-solid fa-check w-3 h-3 text-green-600 mr-1"></i>
                        Validated
                    </span>
                </td>
            `;
            
            approvedTableBody.appendChild(row);
        }
        
        function attachEventListenersToRow(row) {
            // Re-attach event listeners to dynamically added buttons
            const autoApproveBtn = row.querySelector('.auto-approve-btn');
            const forwardReviewBtn = row.querySelector('.forward-review-btn');
            const manualOverrideBtn = row.querySelector('.manual-override-btn');
            
            if (autoApproveBtn) {
                autoApproveBtn.addEventListener('click', handleAutoApprove);
            }
            
            if (forwardReviewBtn) {
                forwardReviewBtn.addEventListener('click', handleForwardReview);
            }
            
            if (manualOverrideBtn) {
                manualOverrideBtn.addEventListener('click', handleManualOverride);
            }
        }
        
        // Helper function to reset modal state
        function resetModalState() {
            currentCheckId = null;
            currentCheckData = null;
            const forwardReasonEl = document.getElementById('forwardReason');
            if (forwardReasonEl) forwardReasonEl.value = '';
        }
        
        // Process check action (approve, reject, needs_review, forward)
        async function processCheck(checkId, action, buttonElement, reason = '') {
            // Show loading state
            const originalHtml = buttonElement ? buttonElement.innerHTML : '';
            if (buttonElement) {
                buttonElement.innerHTML = '<i class="fa-solid fa-spinner fa-spin w-3 h-3 mr-1"></i>Processing...';
                buttonElement.disabled = true;
            }
            
            // Show processing overlay
            const rowContainer = document.querySelector(`[data-check-row="${checkId}"]`);
            if (rowContainer) {
                const overlay = document.createElement('div');
                overlay.className = 'processing-overlay';
                overlay.innerHTML = '<i class="fa-solid fa-spinner fa-spin text-blue-600"></i>';
                rowContainer.style.position = 'relative';
                rowContainer.appendChild(overlay);
            }
            
            try {
                let response;
                
                if (action === 'approve') {
                    response = await fetch(`/api/checks/approve/${checkId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reason: reason })
                    });
                } else if (action === 'reject') {
                    response = await fetch(`/api/checks/reject/${checkId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reason: reason })
                    });
                } else if (action === 'needs_review') {
                    response = await fetch(`/api/checks/needs-review/${checkId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reason: reason })
                    });
                } else if (action === 'forward') {
                    response = await fetch(`/api/checks/forward/${checkId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reason: reason })
                    });
                    
                    if (response.status === 404) {
                        response = await fetch(`/api/checks/reject/${checkId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ reason: reason || 'Forwarded for manual review' })
                        });
                    }
                }
                
                if (response.ok) {
                    const result = await response.json();
                    const actionText = action === 'approve' ? 'approved' : action === 'reject' ? 'rejected' : action === 'needs_review' ? 'sent to manual review' : action === 'forward' ? 'forwarded for review' : 'processed';
                    showToast(`Check ${actionText} successfully!`, 'success');
                    
                    if (action === 'approve' && result.validated_at && result.validated_by_name) {
                        moveToApprovedTable(checkId, result);
                    } else if (action === 'needs_review') {
                        moveToNeedsReviewTable(checkId, result);
                    } else {
                        removeCheckRow(checkId);
                    }
                } else {
                    const error = await response.json();
                    console.error(`HTTP ${response.status} error:`, error);
                    
                    if (error.message && (error.message.includes('constraint') || error.message.includes('violates check') || error.message.includes('check constraint'))) {
                        throw new Error(`Database constraint error: The status 'needs_review' is not allowed. Please run this SQL in Supabase Dashboard: ALTER TABLE checks DROP CONSTRAINT IF EXISTS checks_status_check; ALTER TABLE checks ADD CONSTRAINT checks_status_check CHECK (status IN ('pending', 'needs_review', 'approved', 'rejected'));`);
                    } else {
                        throw new Error(error.message || error.error || `Failed to ${action} check`);
                    }
                }
            } catch (error) {
                console.error(`${action} error:`, error);
                let errorMessage = `Failed to ${action} check.`;
                if (error.message.includes('constraint')) {
                    errorMessage = error.message;
                } else {
                    errorMessage += ' Please try again.';
                }
                showToast(errorMessage, 'error');
                
                if (buttonElement) {
                    buttonElement.innerHTML = originalHtml;
                    buttonElement.disabled = false;
                }
                
                if (rowContainer) {
                    const overlay = rowContainer.querySelector('.processing-overlay');
                    if (overlay) overlay.remove();
                }
            }
        }
        
        function removeCheckRow(checkId) {
            const row = document.querySelector(`[data-check-row="${checkId}"]`)?.closest('tr');
            if (row) {
                row.style.opacity = '0.5';
                row.style.transform = 'scale(0.95)';
                
                setTimeout(() => {
                    row.remove();
                    updateStats();
                    if (typeof checkAndAddEmptyState === 'function') {
                        checkAndAddEmptyState();
                    }
                }, 300);
            }
        }
        
        function moveToApprovedTable(checkId, approvalData) {
            const row = document.querySelector(`[data-check-row="${checkId}"]`)?.closest('tr');
            if (!row) return;
            
            const checkNumber = row.querySelector('td:nth-child(1) .text-sm').textContent;
            const payee = row.querySelector('td:nth-child(2) .text-sm').textContent;
            const amount = row.querySelector('td:nth-child(3) .text-sm').textContent;
            const checkDate = row.querySelector('td:nth-child(4) .text-sm').textContent;
            const matter = row.querySelector('td:nth-child(5) .text-sm').textContent;
            const confidence = row.querySelector('td:nth-child(6) .text-sm').textContent;
            
            const approvedTableBody = document.querySelector('#approved-content tbody');
            const emptyRow = approvedTableBody.querySelector('td[colspan]')?.closest('tr');
            if (emptyRow) emptyRow.remove();
            
            const validatedDate = new Date(approvalData.validated_at).toLocaleDateString();
            
            const newRow = document.createElement('tr');
            newRow.className = 'hover:bg-gray-50 cursor-pointer transition-colors';
            newRow.onclick = () => window.location.href = `/checks/detail/${checkId}`;
            newRow.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900">${checkNumber}</div>
                    <div class="text-xs text-gray-500">ID: ${checkId.substring(0, 8)}...</div>
                </td>
                <td class="px-6 py-4">
                    <div class="text-sm text-gray-900 max-w-xs truncate">${payee}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900">${amount}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-900">${checkDate}</div>
                </td>
                <td class="px-6 py-4">
                    <div class="text-sm text-gray-900 max-w-xs truncate">${matter}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center gap-2">
                        <div class="text-sm font-medium ${getConfidenceTextColor(confidence)}">${confidence}</div>
                        <div class="w-16 bg-gray-200 rounded-full h-2">
                            <div class="h-2 rounded-full ${getConfidenceBarColor(confidence)}" style="width: ${confidence.replace('%', '')}%"></div>
                        </div>
                    </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                        Approved
                    </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${validatedDate}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-center">
                    <span class="text-xs text-green-600 font-medium">
                        <i class="fa-solid fa-check w-3 h-3 text-green-600 mr-1"></i>
                        Validated
                    </span>
                </td>
            `;
            
            newRow.style.opacity = '0';
            newRow.style.transform = 'translateY(-10px)';
            approvedTableBody.appendChild(newRow);
            
            setTimeout(() => {
                newRow.style.transition = 'all 0.3s ease-out';
                newRow.style.opacity = '1';
                newRow.style.transform = 'translateY(0)';
            }, 100);
            
            row.style.opacity = '0.5';
            row.style.transform = 'scale(0.95)';
            setTimeout(() => {
                row.remove();
                updateTabCounts();
                updateStats();
                if (typeof checkAndAddEmptyState === 'function') {
                    checkAndAddEmptyState();
                }
            }, 300);
        }
        
        function moveToNeedsReviewTable(checkId, reviewData) {
            const row = document.querySelector(`[data-check-row="${checkId}"]`)?.closest('tr');
            if (!row) return;
            
            const checkNumber = row.querySelector('td:nth-child(1) .text-sm').textContent;
            const payee = row.querySelector('td:nth-child(2) .text-sm').textContent;
            const amount = row.querySelector('td:nth-child(3) .text-sm').textContent;
            const checkDate = row.querySelector('td:nth-child(4) .text-sm').textContent;
            const matter = row.querySelector('td:nth-child(5) .text-sm').textContent;
            const confidence = row.querySelector('td:nth-child(6) .text-sm').textContent;
            
            const needsReviewTableBody = document.querySelector('#needs_review-content tbody');
            const emptyRow = needsReviewTableBody.querySelector('td[colspan]')?.closest('tr');
            if (emptyRow) emptyRow.remove();
            
            const reviewDate = new Date().toLocaleDateString();
            
            const newRow = document.createElement('tr');
            newRow.className = 'hover:bg-gray-50 cursor-pointer transition-colors';
            newRow.onclick = () => window.location.href = `/checks/detail/${checkId}`;
            newRow.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900">${checkNumber}</div>
                    <div class="text-xs text-gray-500">ID: ${checkId.substring(0, 8)}...</div>
                </td>
                <td class="px-6 py-4">
                    <div class="text-sm text-gray-900 max-w-xs truncate">${payee}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900">${amount}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-900">${checkDate}</div>
                </td>
                <td class="px-6 py-4">
                    <div class="text-sm text-gray-900 max-w-xs truncate">${matter}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center gap-2">
                        <div class="text-sm font-medium ${getConfidenceTextColor(confidence)}">${confidence}%</div>
                        <div class="w-16 bg-gray-200 rounded-full h-2">
                            <div class="h-2 rounded-full ${getConfidenceBarColor(confidence)}" style="width: ${confidence.replace('%', '')}%"></div>
                        </div>
                    </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                        Needs Review
                    </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${reviewDate}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-center">
                    <button class="text-orange-600 hover:text-orange-800 text-xs font-medium px-3 py-1 border border-orange-300 rounded-lg hover:bg-orange-50 transition-colors"
                            onclick="window.location.href='/checks/detail/${checkId}'; event.stopPropagation();">
                        <i class="fa-solid fa-eye w-3 h-3 mr-1"></i>
                        Review
                    </button>
                </td>
            `;
            
            newRow.style.opacity = '0';
            newRow.style.transform = 'translateY(-10px)';
            needsReviewTableBody.appendChild(newRow);
            
            setTimeout(() => {
                newRow.style.transition = 'all 0.3s ease-out';
                newRow.style.opacity = '1';
                newRow.style.transform = 'translateY(0)';
            }, 100);
            
            row.style.opacity = '0.5';
            row.style.transform = 'scale(0.95)';
            setTimeout(() => {
                row.remove();
                updateTabCounts();
                updateStats();
                if (typeof checkAndAddEmptyState === 'function') {
                    checkAndAddEmptyState();
                }
            }, 300);
        }
        
        function updateStats() {
            const remainingRows = document.querySelectorAll('tbody tr').length;
            const totalCountElements = document.querySelectorAll('.metric-card .text-2xl');
            
            if (totalCountElements[2]) {
                totalCountElements[2].textContent = remainingRows;
            }
            
            const autoApproveButtons = document.querySelectorAll('.auto-approve-btn').length;
            const automationRate = remainingRows > 0 ? Math.round((autoApproveButtons / remainingRows) * 100) : 0;
            if (totalCountElements[3]) {
                totalCountElements[3].textContent = automationRate + '%';
            }
        }
        
        function handleAutoApprove(e) {
            e.stopPropagation();
            const btn = e.currentTarget;
            const checkId = btn.dataset.checkId;
            const checkNumber = btn.dataset.checkNumber;
            const amount = btn.dataset.amount;
            const payee = btn.dataset.payee;
            const confidence = btn.dataset.confidence;
            
            if (!confirm(`Auto-approve check ${checkNumber} for ${amount} to ${payee}?\n\nAI Confidence: ${confidence}% (High confidence threshold met)`)) {
                return;
            }
            
            processCheck(checkId, 'approve', btn, `Auto-approved with ${confidence}% confidence`);
        }
        
        function handleForwardReview(e) {
            e.stopPropagation();
            const btn = e.currentTarget;
            const checkId = btn.dataset.checkId;
            const checkNumber = btn.dataset.checkNumber;
            const amount = btn.dataset.amount;
            const payee = btn.dataset.payee;
            const confidence = btn.dataset.confidence;
            
            currentCheckId = checkId;
            currentCheckData = { checkNumber, amount, payee, confidence };
            
            document.getElementById('forwardCheckInfo').innerHTML = `
                <strong>Check ${checkNumber}</strong><br>
                Amount: ${amount}<br>
                Payee: ${payee}
            `;
            
            let reason = '';
            if (confidence < 60) {
                reason = 'Low confidence - Multiple validation factors failed';
            } else if (confidence < 80) {
                reason = 'Medium confidence - Some validation concerns detected';
            }
            document.getElementById('confidenceReason').textContent = `Confidence: ${confidence}% - ${reason}`;
            
            document.getElementById('forwardReviewModal').classList.remove('hidden');
            document.getElementById('forwardReason').focus();
        }
        
        function handleManualOverride(e) {
            e.stopPropagation();
            const btn = e.currentTarget;
            const checkId = btn.dataset.checkId;
            const row = btn.closest('tr');
            const checkNumber = row.querySelector('td:first-child .text-sm').textContent;
            const amount = row.querySelector('td:nth-child(3) .text-sm').textContent;
            const payee = row.querySelector('td:nth-child(2) .text-sm').textContent;
            
            currentCheckId = checkId;
            currentCheckData = { checkNumber, amount, payee };
            
            document.getElementById('overrideCheckInfo').innerHTML = `
                <strong>Check ${checkNumber}</strong><br>
                Amount: ${amount}<br>
                Payee: ${payee}
            `;
            
            document.getElementById('manualOverrideModal').classList.remove('hidden');
        }

        // Global variables for modal state - need to be accessible by handler functions
        let currentCheckId = null;
        let currentCheckData = null;

        document.addEventListener('DOMContentLoaded', function() {
            

            
            // Tab functionality
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const targetTab = this.dataset.tab;
                    console.log('Tab clicked:', targetTab);
                    
                    // Remove active class from all buttons
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    
                    // Add active class to clicked button
                    this.classList.add('active');
                    
                    // Hide all tab contents using inline styles
                    tabContents.forEach(content => {
                        content.classList.remove('active');
                        content.style.display = 'none';
                    });
                    
                    // Show target tab content using inline styles
                    const targetContent = document.getElementById(targetTab + '-content');
                    if (targetContent) {
                        targetContent.classList.add('active');
                        targetContent.style.display = 'block';
                        console.log('Showing tab:', targetTab + '-content');
                    }
                });
            });
            
            // Initialize tab counts
            updateTabCounts();
            
            // Mobile menu functionality
            const mobileMenuBtn = document.getElementById('mobileMenuBtn');
            const sidebar = document.getElementById('sidebar');
            const sidebarOverlay = document.getElementById('sidebarOverlay');
            
            mobileMenuBtn?.addEventListener('click', function() {
                sidebar.classList.toggle('-translate-x-full');
                sidebarOverlay.classList.toggle('active');
            });
            
            sidebarOverlay?.addEventListener('click', function() {
                sidebar.classList.add('-translate-x-full');
                sidebarOverlay.classList.remove('active');
            });
            
            // Auto-approve buttons (high confidence)
            document.querySelectorAll('.auto-approve-btn').forEach(btn => {
                btn.addEventListener('click', async function(e) {
                    e.stopPropagation();
                    
                    const checkId = this.dataset.checkId;
                    const checkNumber = this.dataset.checkNumber;
                    const amount = this.dataset.amount;
                    const payee = this.dataset.payee;
                    const confidence = this.dataset.confidence;
                    
                    if (!confirm(`Auto-approve check ${checkNumber} for ${amount} to ${payee}?\n\nAI Confidence: ${confidence}% (High confidence threshold met)`)) {
                        return;
                    }
                    
                    try {
                        const originalHtml = this.innerHTML;
                        this.disabled = true;
                        this.innerHTML = '<i class="fa-solid fa-spinner fa-spin w-3 h-3 mr-1"></i>Processing...';
                        
                        const response = await fetch(`/api/checks/approve/${checkId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ reason: `Auto-approved with ${confidence}% confidence` })
                        });
                        
                        const result = await response.json();
                        
                        if (result.status === 'success') {
                            showToast('Check approved successfully!', 'success');
                            // Move check to approved tab
                            moveToApprovedTable(checkId, result);
                        } else {
                            showToast(result.message || 'Failed to approve check', 'error');
                            this.disabled = false;
                            this.innerHTML = originalHtml;
                        }
                    } catch (error) {
                        console.error('Error approving check:', error);
                        showToast('Error approving check', 'error');
                        this.disabled = false;
                        this.innerHTML = originalHtml;
                    }
                });
            });
            
            // Forward for review buttons (low confidence)
            document.querySelectorAll('.forward-review-btn').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    
                    const checkId = this.dataset.checkId;
                    const checkNumber = this.dataset.checkNumber;
                    const amount = this.dataset.amount;
                    const payee = this.dataset.payee;
                    const confidence = this.dataset.confidence;
                    
                    currentCheckId = checkId;
                    currentCheckData = { checkNumber, amount, payee, confidence };
                    
                    // Update modal with check info
                    document.getElementById('forwardCheckInfo').innerHTML = `
                        <strong>Check ${checkNumber}</strong><br>
                        Amount: ${amount}<br>
                        Payee: ${payee}
                    `;
                    
                    // Show confidence reason
                    let reason = '';
                    if (confidence < 60) {
                        reason = 'Low confidence - Multiple validation factors failed';
                    } else if (confidence < 80) {
                        reason = 'Medium confidence - Some validation concerns detected';
                    }
                    document.getElementById('confidenceReason').textContent = `Confidence: ${confidence}% - ${reason}`;
                    
                    document.getElementById('forwardReviewModal').classList.remove('hidden');
                    document.getElementById('forwardReason').focus();
                });
            });
            
            // Manual override buttons
            document.querySelectorAll('.manual-override-btn').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    
                    const checkId = this.dataset.checkId;
                    const row = this.closest('tr');
                    const checkNumber = row.querySelector('td:first-child .text-sm').textContent;
                    const amount = row.querySelector('td:nth-child(3) .text-sm').textContent;
                    const payee = row.querySelector('td:nth-child(2) .text-sm').textContent;
                    
                    currentCheckId = checkId;
                    currentCheckData = { checkNumber, amount, payee };
                    
                    // Update modal with check info
                    document.getElementById('overrideCheckInfo').innerHTML = `
                        <strong>Check ${checkNumber}</strong><br>
                        Amount: ${amount}<br>
                        Payee: ${payee}
                    `;
                    
                    document.getElementById('manualOverrideModal').classList.remove('hidden');
                });
            });
            
            // Modal controls
            document.getElementById('cancelForward').addEventListener('click', function() {
                document.getElementById('forwardReviewModal').classList.add('hidden');
                resetModalState();
            });
            
            document.getElementById('confirmForward').addEventListener('click', async function() {
                if (!currentCheckId) {
                    showToast('Error: No check selected', 'error');
                    return;
                }
                
                const reason = document.getElementById('forwardReason').value.trim();
                
                try {
                    this.disabled = true;
                    this.innerHTML = '<i class="fa-solid fa-spinner fa-spin w-4 h-4 mr-2"></i>Forwarding...';
                    
                    const response = await fetch(`/api/checks/needs-review/${currentCheckId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reason: reason || 'Forwarded for manual review due to low AI confidence' })
                    });
                    
                    const result = await response.json();
                    
                    if (result.status === 'success') {
                        showToast('Check forwarded for manual review successfully!', 'success');
                        // Move check to needs review tab
                        moveToNeedsReviewTable(currentCheckId, result);
                        document.getElementById('forwardReviewModal').classList.add('hidden');
                        resetModalState();
                    } else {
                        showToast(result.message || 'Failed to forward check', 'error');
                        this.disabled = false;
                        this.innerHTML = 'Forward to Review Queue';
                    }
                } catch (error) {
                    console.error('Error forwarding check:', error);
                    showToast('Error forwarding check', 'error');
                    this.disabled = false;
                    this.innerHTML = 'Forward to Review Queue';
                }
            });
            
            document.getElementById('cancelOverride').addEventListener('click', function() {
                document.getElementById('manualOverrideModal').classList.add('hidden');
                resetModalState();
            });
            
            document.getElementById('forceApprove').addEventListener('click', async function() {
                if (!currentCheckId || !currentCheckData) {
                    showToast('Error: No check selected', 'error');
                    return;
                }
                
                if (!confirm(`Force approve check ${currentCheckData.checkNumber}?\n\nThis will override the AI recommendation.`)) {
                    return;
                }
                
                try {
                    this.disabled = true;
                    this.innerHTML = '<i class="fa-solid fa-spinner fa-spin w-4 h-4 mr-2"></i>Approving...';
                    
                    const response = await fetch(`/api/checks/approve/${currentCheckId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reason: 'Force approved - Manual override' })
                    });
                    
                    const result = await response.json();
                    
                    if (result.status === 'success') {
                        showToast('Check approved successfully!', 'success');
                        // Move check to approved tab
                        moveToApprovedTable(currentCheckId, result);
                        document.getElementById('manualOverrideModal').classList.add('hidden');
                        resetModalState();
                    } else {
                        showToast(result.message || 'Failed to approve check', 'error');
                        this.disabled = false;
                        this.innerHTML = '<i class="fa-solid fa-check-double w-4 h-4 mr-2"></i>Quick Approval';
                    }
                } catch (error) {
                    console.error('Error approving check:', error);
                    showToast('Error approving check', 'error');
                    this.disabled = false;
                    this.innerHTML = '<i class="fa-solid fa-check-double w-4 h-4 mr-2"></i>Quick Approval';
                }
            });
            
            document.getElementById('sendToReview').addEventListener('click', async function() {
                if (!currentCheckId) {
                    console.error('No currentCheckId available');
                    showToast('Error: No check selected', 'error');
                    return;
                }
                
                if (!confirm(`Send check ${currentCheckData?.checkNumber || currentCheckId} for manual review?`)) {
                    return;
                }
                
                try {
                    this.disabled = true;
                    this.innerHTML = '<i class="fa-solid fa-spinner fa-spin w-4 h-4 mr-2"></i>Updating...';
                    
                    const response = await fetch(`/api/checks/needs-review/${currentCheckId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reason: 'Sent to manual review - Manual override' })
                    });
                    
                    const result = await response.json();
                    
                    if (result.status === 'success') {
                        showToast('Check sent to manual review successfully!', 'success');
                        // Move check to needs review tab
                        moveToNeedsReviewTable(currentCheckId, result);
                        document.getElementById('manualOverrideModal').classList.add('hidden');
                        resetModalState();
                    } else {
                        showToast(result.message || 'Failed to update check status', 'error');
                        this.disabled = false;
                        this.innerHTML = '<i class="fa-solid fa-user-check w-4 h-4 mr-2"></i>Send to Manual Review';
                    }
                } catch (error) {
                    console.error('Error updating check status:', error);
                    showToast('Error updating check status', 'error');
                    this.disabled = false;
                    this.innerHTML = '<i class="fa-solid fa-user-check w-4 h-4 mr-2"></i>Send to Manual Review';
                }
            });
            
            // Close modals on escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    if (!document.getElementById('forwardReviewModal').classList.contains('hidden')) {
                        document.getElementById('cancelForward').click();
                    }
                    if (!document.getElementById('manualOverrideModal').classList.contains('hidden')) {
                        document.getElementById('cancelOverride').click();
                    }
                }
            });
        });
    </script>
</body>
</html>
                    const originalHtml = buttonElement.innerHTML;
                    buttonElement.innerHTML = '<i class="fa-solid fa-spinner fa-spin w-3 h-3 mr-1"></i>Processing...';
                    buttonElement.disabled = true;
                }
                
                // Show processing overlay
                const rowContainer = document.querySelector(`[data-check-row="${checkId}"]`);
                if (rowContainer) {
                    const overlay = document.createElement('div');
                    overlay.className = 'processing-overlay';
                    overlay.innerHTML = '<i class="fa-solid fa-spinner fa-spin text-blue-600"></i>';
                    rowContainer.style.position = 'relative';
                    rowContainer.appendChild(overlay);
                }
                
                try {
                    let response;
                    
                    if (action === 'approve') {
                        response = await fetch(`/api/checks/approve/${checkId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ reason: reason })
                        });
                    } else if (action === 'reject') {
                        response = await fetch(`/api/checks/reject/${checkId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ reason: reason })
                        });
                    } else if (action === 'needs_review') {
                        response = await fetch(`/api/checks/needs-review/${checkId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ reason: reason })
                        });
                    } else if (action === 'forward') {
                        // Forward to review queue (could be a different endpoint)
                        response = await fetch(`/api/checks/forward/${checkId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ reason: reason })
                        });
                        
                        // If forward endpoint doesn't exist, fall back to reject
                        if (response.status === 404) {
                            response = await fetch(`/api/checks/reject/${checkId}`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ reason: reason || 'Forwarded for manual review' })
                            });
                        }
                    }
                    
                    if (response.ok) {
                        const result = await response.json();
                        const actionText = action === 'approve' ? 'approved' : action === 'reject' ? 'rejected' : action === 'needs_review' ? 'sent to manual review' : action === 'forward' ? 'forwarded for review' : 'processed';
                        showToast(`Check ${actionText} successfully!`, 'success');
                        
                        if (action === 'approve' && result.validated_at && result.validated_by_name) {
                            // Move check to approved tab
                            moveToApprovedTable(checkId, result);
                        } else if (action === 'needs_review') {
                            // Move check to needs review tab
                            moveToNeedsReviewTable(checkId, result);
                        } else {
                            removeCheckRow(checkId);
                        }
                    } else {
                        const error = await response.json();
                        console.error(`HTTP ${response.status} error:`, error);
                        
                        // Check for specific database constraint error
                        if (error.message && (error.message.includes('constraint') || error.message.includes('violates check') || error.message.includes('check constraint'))) {
                            throw new Error(`Database constraint error: The status 'needs_review' is not allowed. Please run this SQL in Supabase Dashboard: ALTER TABLE checks DROP CONSTRAINT IF EXISTS checks_status_check; ALTER TABLE checks ADD CONSTRAINT checks_status_check CHECK (status IN ('pending', 'needs_review', 'approved', 'rejected'));`);
                        } else {
                            throw new Error(error.message || error.error || `Failed to ${action} check`);
                        }
                    }
                } catch (error) {
                    console.error(`${action} error:`, error);
                    let errorMessage = `Failed to ${action} check.`;
                    if (error.message.includes('constraint')) {
                        errorMessage = error.message;
                    } else {
                        errorMessage += ' Please try again.';
                    }
                    showToast(errorMessage, 'error');
                    
                    // Restore button if it exists
                    if (buttonElement) {
                        buttonElement.innerHTML = originalHtml;
                        buttonElement.disabled = false;
                    }
                    
                    // Remove overlay
                    if (rowContainer) {
                        const overlay = rowContainer.querySelector('.processing-overlay');
                        if (overlay) overlay.remove();
                    }
                }
            }
            
            function removeCheckRow(checkId) {
                const row = document.querySelector(`[data-check-row="${checkId}"]`)?.closest('tr');
                if (row) {
                    row.style.opacity = '0.5';
                    row.style.transform = 'scale(0.95)';
                    
                    setTimeout(() => {
                        row.remove();
                        updateStats();
                        
                        // Check if the table is now empty and add empty state if needed
                        checkAndAddEmptyState();
                    }, 300);
                }
            }
            
            function checkAndAddEmptyState() {
                // Check pending table
                const pendingTableBody = document.querySelector('#pending-content tbody');
                const pendingRows = pendingTableBody.querySelectorAll('tr');
                const pendingDataRows = Array.from(pendingRows).filter(row => !row.querySelector('td[colspan]'));
                
                if (pendingDataRows.length === 0) {
                    addEmptyStateToPendingTable();
                }
                
                // Check needs review table
                const needsReviewTableBody = document.querySelector('#needs_review-content tbody');
                const needsReviewRows = needsReviewTableBody.querySelectorAll('tr');
                const needsReviewDataRows = Array.from(needsReviewRows).filter(row => !row.querySelector('td[colspan]'));
                
                if (needsReviewDataRows.length === 0) {
                    addEmptyStateToNeedsReviewTable();
                }
            }
            
            function addEmptyStateToPendingTable() {
                const pendingTableBody = document.querySelector('#pending-content tbody');
                
                // Check if empty state already exists
                const existingEmptyRow = pendingTableBody.querySelector('td[colspan]')?.closest('tr');
                if (existingEmptyRow) return;
                
                const emptyRow = document.createElement('tr');
                emptyRow.innerHTML = `
                    <td colspan="9" class="px-6 py-12 text-center text-gray-500">
                        <i class="fa-solid fa-clock w-8 h-8 mx-auto mb-2 text-gray-300"></i>
                        <p class="text-sm">No pending checks at this time</p>
                    </td>
                `;
                
                // Add with fade-in animation
                emptyRow.style.opacity = '0';
                pendingTableBody.appendChild(emptyRow);
                
                setTimeout(() => {
                    emptyRow.style.transition = 'opacity 0.3s ease-in';
                    emptyRow.style.opacity = '1';
                }, 100);
            }
            
            function addEmptyStateToNeedsReviewTable() {
                const needsReviewTableBody = document.querySelector('#needs_review-content tbody');
                
                // Check if empty state already exists
                const existingEmptyRow = needsReviewTableBody.querySelector('td[colspan]')?.closest('tr');
                if (existingEmptyRow) return;
                
                const emptyRow = document.createElement('tr');
                emptyRow.innerHTML = `
                    <td colspan="9" class="px-6 py-12 text-center text-gray-500">
                        <i class="fa-solid fa-exclamation-triangle w-8 h-8 mx-auto mb-2 text-gray-300"></i>
                        <p class="text-sm">No checks requiring manual review at this time</p>
                    </td>
                `;
                
                // Add with fade-in animation
                emptyRow.style.opacity = '0';
                needsReviewTableBody.appendChild(emptyRow);
                
                setTimeout(() => {
                    emptyRow.style.transition = 'opacity 0.3s ease-in';
                    emptyRow.style.opacity = '1';
                }, 100);
            }
            
            function updateStats() {
                // Update the total count and automation rate
                const remainingRows = document.querySelectorAll('tbody tr').length;
                const totalCountElements = document.querySelectorAll('.metric-card .text-2xl');
                
                // Update total pending count
                if (totalCountElements[2]) {
                    totalCountElements[2].textContent = remainingRows;
                }
                
                // Recalculate automation rate
                const autoApproveButtons = document.querySelectorAll('.auto-approve-btn').length;
                const automationRate = remainingRows > 0 ? Math.round((autoApproveButtons / remainingRows) * 100) : 0;
                if (totalCountElements[3]) {
                    totalCountElements[3].textContent = automationRate + '%';
                }
                
                // Empty state is now handled by checkAndAddEmptyState() function
            }
            
            function moveToApprovedTable(checkId, approvalData) {
                const row = document.querySelector(`[data-check-row="${checkId}"]`)?.closest('tr');
                if (!row) return;
                
                // Get the row data
                const checkNumber = row.querySelector('td:nth-child(1) .text-sm').textContent;
                const payee = row.querySelector('td:nth-child(2) .text-sm').textContent;
                const amount = row.querySelector('td:nth-child(3) .text-sm').textContent;
                const checkDate = row.querySelector('td:nth-child(4) .text-sm').textContent;
                const matter = row.querySelector('td:nth-child(5) .text-sm').textContent;
                const confidence = row.querySelector('td:nth-child(6) .text-sm').textContent;
                
                // Create new row for approved table
                const approvedTableBody = document.querySelector('#approved-content tbody');
                
                // Remove empty state if exists
                const emptyRow = approvedTableBody.querySelector('td[colspan]')?.closest('tr');
                if (emptyRow) {
                    emptyRow.remove();
                }
                
                // Format validation date
                const validatedDate = new Date(approvalData.validated_at).toLocaleDateString();
                
                // Create new approved row
                const newRow = document.createElement('tr');
                newRow.className = 'hover:bg-gray-50 cursor-pointer transition-colors';
                newRow.onclick = () => window.location.href = `/checks/detail/${checkId}`;
                newRow.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm font-medium text-gray-900">${checkNumber}</div>
                        <div class="text-xs text-gray-500">ID: ${checkId.substring(0, 8)}...</div>
                    </td>
                    <td class="px-6 py-4">
                        <div class="text-sm text-gray-900 max-w-xs truncate">${payee}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm font-medium text-gray-900">${amount}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">${checkDate}</div>
                    </td>
                    <td class="px-6 py-4">
                        <div class="text-sm text-gray-900 max-w-xs truncate">${matter}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center gap-2">
                            <div class="text-sm font-medium ${getConfidenceTextColor(confidence)}">${confidence}</div>
                            <div class="w-16 bg-gray-200 rounded-full h-2">
                                <div class="h-2 rounded-full ${getConfidenceBarColor(confidence)}" style="width: ${confidence.replace('%', '')}%"></div>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            Approved
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        ${validatedDate}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-center">
                        <span class="text-xs text-green-600 font-medium">
                            <i class="fa-solid fa-check w-3 h-3 text-green-600 mr-1"></i>
                            Validated
                        </span>
                    </td>
                `;
                
                // Add with animation
                newRow.style.opacity = '0';
                newRow.style.transform = 'translateY(-10px)';
                approvedTableBody.appendChild(newRow);
                
                setTimeout(() => {
                    newRow.style.transition = 'all 0.3s ease-out';
                    newRow.style.opacity = '1';
                    newRow.style.transform = 'translateY(0)';
                }, 100);
                
                // Remove from pending table
                row.style.opacity = '0.5';
                row.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    row.remove();
                    updateTabCounts();
                    updateStats();
                    checkAndAddEmptyState();
                }, 300);
            }
            
            function moveToNeedsReviewTable(checkId, reviewData) {
                const row = document.querySelector(`[data-check-row="${checkId}"]`)?.closest('tr');
                if (!row) return;
                
                // Get the row data
                const checkNumber = row.querySelector('td:nth-child(1) .text-sm').textContent;
                const payee = row.querySelector('td:nth-child(2) .text-sm').textContent;
                const amount = row.querySelector('td:nth-child(3) .text-sm').textContent;
                const checkDate = row.querySelector('td:nth-child(4) .text-sm').textContent;
                const matter = row.querySelector('td:nth-child(5) .text-sm').textContent;
                const confidence = row.querySelector('td:nth-child(6) .text-sm').textContent;
                
                // Create new row for needs review table
                const needsReviewTableBody = document.querySelector('#needs_review-content tbody');
                
                // Remove empty state if exists
                const emptyRow = needsReviewTableBody.querySelector('td[colspan]')?.closest('tr');
                if (emptyRow) {
                    emptyRow.remove();
                }
                
                // Format review date
                const reviewDate = new Date().toLocaleDateString();
                
                // Create new needs review row
                const newRow = document.createElement('tr');
                newRow.className = 'hover:bg-gray-50 cursor-pointer transition-colors';
                newRow.onclick = () => window.location.href = `/checks/detail/${checkId}`;
                newRow.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm font-medium text-gray-900">${checkNumber}</div>
                        <div class="text-xs text-gray-500">ID: ${checkId.substring(0, 8)}...</div>
                    </td>
                    <td class="px-6 py-4">
                        <div class="text-sm text-gray-900 max-w-xs truncate">${payee}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm font-medium text-gray-900">${amount}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">${checkDate}</div>
                    </td>
                    <td class="px-6 py-4">
                        <div class="text-sm text-gray-900 max-w-xs truncate">${matter}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center gap-2">
                            <div class="text-sm font-medium ${getConfidenceTextColor(confidence)}">${confidence}</div>
                            <div class="w-16 bg-gray-200 rounded-full h-2">
                                <div class="h-2 rounded-full ${getConfidenceBarColor(confidence)}" style="width: ${confidence.replace('%', '')}%"></div>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                            Needs Review
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        ${reviewDate}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-center">
                        <span class="text-xs text-orange-600 font-medium">
                            <i class="fa-solid fa-exclamation-triangle w-3 h-3 text-orange-600 mr-1"></i>
                            Flagged
                        </span>
                    </td>
                `;
                
                // Add with animation
                newRow.style.opacity = '0';
                newRow.style.transform = 'translateY(-10px)';
                needsReviewTableBody.appendChild(newRow);
                
                setTimeout(() => {
                    newRow.style.transition = 'all 0.3s ease-out';
                    newRow.style.opacity = '1';
                    newRow.style.transform = 'translateY(0)';
                }, 100);
                
                // Remove from pending table
                row.style.opacity = '0.5';
                row.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    row.remove();
                    updateTabCounts();
                    updateStats();
                    checkAndAddEmptyState();
                }, 300);
            }
            
            function updateTabCounts() {
                // Count actual check rows (excluding empty state rows which have colspan attribute)
                const pendingRows = document.querySelectorAll('#pending-content tbody tr');
                const pendingCount = Array.from(pendingRows).filter(row => !row.querySelector('td[colspan]')).length;
                
                const needsReviewRows = document.querySelectorAll('#needs_review-content tbody tr');
                const needsReviewCount = Array.from(needsReviewRows).filter(row => !row.querySelector('td[colspan]')).length;
                
                const approvedRows = document.querySelectorAll('#approved-content tbody tr');
                const approvedCount = Array.from(approvedRows).filter(row => !row.querySelector('td[colspan]')).length;
                
                // Update tab counts with animation
                const pendingCountEl = document.getElementById('pending-count');
                const needsReviewCountEl = document.getElementById('needs_review-count');
                const approvedCountEl = document.getElementById('approved-count');
                
                if (pendingCountEl.textContent !== pendingCount.toString()) {
                    pendingCountEl.style.transform = 'scale(1.2)';
                    pendingCountEl.textContent = pendingCount;
                    setTimeout(() => pendingCountEl.style.transform = 'scale(1)', 200);
                }
                
                if (needsReviewCountEl.textContent !== needsReviewCount.toString()) {
                    needsReviewCountEl.style.transform = 'scale(1.2)';
                    needsReviewCountEl.textContent = needsReviewCount;
                    setTimeout(() => needsReviewCountEl.style.transform = 'scale(1)', 200);
                }
                
                if (approvedCountEl.textContent !== approvedCount.toString()) {
                    approvedCountEl.style.transform = 'scale(1.2)';
                    approvedCountEl.textContent = approvedCount;
                    setTimeout(() => approvedCountEl.style.transform = 'scale(1)', 200);
                }
            }
            
            function showToast(message, type = 'info') {
                const toast = document.createElement('div');
                toast.className = `max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden transform transition-all duration-300 translate-x-full opacity-0`;
                
                const bgColor = type === 'success' ? 'bg-green-50' : type === 'error' ? 'bg-red-50' : 'bg-blue-50';
                const textColor = type === 'success' ? 'text-green-800' : type === 'error' ? 'text-red-800' : 'text-blue-800';
                const iconClass = type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle';
                
                toast.innerHTML = `
                    <div class="p-4 ${bgColor}">
                        <div class="flex items-center">
                            <i class="fa-solid ${iconClass} w-5 h-5 ${textColor} mr-3"></i>
                            <p class="text-sm font-medium ${textColor}">${message}</p>
                        </div>
                    </div>
                `;
                
                document.getElementById('toastContainer').appendChild(toast);
                
                // Animate in
                setTimeout(() => {
                    toast.classList.remove('translate-x-full', 'opacity-0');
                }, 100);
                
                // Animate out and remove
                setTimeout(() => {
                    toast.classList.add('translate-x-full', 'opacity-0');
                    setTimeout(() => toast.remove(), 300);
                }, 4000);
            }
        });
    </script>
</body>
</html>